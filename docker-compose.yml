services:
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.18.6
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - ES_JAVA_OPTS=-Xms1g -Xmx1g
    volumes:
      - es_data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
      - "9300:9300"
    networks:
      - observability
    restart: unless-stopped

  logstash:
    image: docker.elastic.co/logstash/logstash:8.18.6
    container_name: logstash
    depends_on:
      - elasticsearch
    volumes:
      - ./src/main/java/com/dinidu/pms/logstash/pipeline:/usr/share/logstash/pipeline:ro
      - logstash_data:/usr/share/logstash/data
    ports:
      - "5000:5000"
      - "9600:9600"
    environment:
      - LS_JAVA_OPTS=-Xms512m -Xmx512m
    networks:
      - observability
    restart: unless-stopped
    entrypoint: >
      sh -c "
        until curl -s http://elasticsearch:9200 >/dev/null; do
          echo 'Waiting for Elasticsearch...';
          sleep 5;
        done;
        /usr/local/bin/docker-entrypoint
      "

  kibana:
    image: docker.elastic.co/kibana/kibana:8.18.6
    container_name: kibana
    depends_on:
      - elasticsearch
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    ports:
      - "5601:5601"
    volumes:
      - kibana_data:/usr/share/kibana/data
    networks:
      - observability
    restart: unless-stopped

  apm-server:
    image: docker.elastic.co/apm/apm-server:8.18.6
    container_name: apm-server
    depends_on:
      - elasticsearch
    environment:
      - output.elasticsearch.hosts=["http://elasticsearch:9200"]
      - apm-server.kibana.enabled=true
      - apm-server.kibana.host=http://kibana:5601
    ports:
      - "8200:8200"
    networks:
      - observability
    restart: unless-stopped

  grafana:
    image: grafana/grafana-oss:12.1.0
    container_name: grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_ANALYTICS_CHECK_FOR_UPDATES=false
      - GF_ANALYTICS_REPORTING_ENABLED=false
      - GF_PLUGINS_ALLOW_LOADING_UNSIGNED_PLUGINS=false
      - GF_UPGRADE_DISABLE_UPGRADE_CHECK=true
    volumes:
      - grafana-storage:/var/lib/grafana
    depends_on:
      - prometheus
    networks:
      - observability

  prometheus:
    image: prom/prometheus:v3.5.0
    container_name: prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - prometheus-data:/prometheus
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.enable-lifecycle'
    networks:
      - observability

  node-exporter:
    image: prom/node-exporter:v1.9.1
    container_name: node-exporter
    restart: unless-stopped
    ports:
      - "9100:9100"
    networks:
      - observability
    command:
      - '--path.rootfs=/'
    # remove pid: "host" + /proc,/sys mounts for Windows
    # if you deploy on Linux later, re-add:
    # pid: "host"
    # volumes:
    #   - /proc:/host/proc:ro
    #   - /sys:/host/sys:ro
    #   - /:/rootfs:ro

volumes:
  es_data:
  logstash_data:
  grafana-storage:
  prometheus-data:
  kibana_data:


networks:
  observability:
    driver: bridge
